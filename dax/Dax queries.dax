
Rainfall_Add_Forecast = 
/*1 field*/
VAR __Year = 'Table_Rainfall'[Year]
VAR __Rainfall = 'Table_Rainfall'[Rainfall]
VAR __Filter = FILTER('Table_Rainfall', 'Table_Rainfall'[Year] >= __Year-4 && 'Table_Rainfall'[Year] < __Year) --робимо фільтр, щоб для кожного значення фільтрувалися 4 попередні роки
VAR __Forecast = AVERAGEX(__Filter,[Rainfall]) --розраховуємо середнє значення за 4 останні роки для кожної комірки
VAR __Correction = IF('Table_Rainfall'[Rainfall] = BLANK() && 'Table_Rainfall'[Year] <> MAX('Table_Rainfall'[Year]), __Forecast, 'Table_Rainfall'[Rainfall]) -- коригуємо опади, додаючи прогноз за передостанній рік
RETURN
    __Correction


Forecast = 
-- 2 field
VAR __MinYear = MIN('Table_Rainfall'[Year])
VAR __Number = 4
VAR __Year = 'Table_Rainfall'[Year]
VAR __Rainfall = 'Table_Rainfall'[Rainfall_Add_Forecast]
VAR __Filter = FILTER('Table_Rainfall', 'Table_Rainfall'[Year] >= __Year-__Number && 'Table_Rainfall'[Year] < __Year) --робимо фільтр, щоб для кожного значення фільтрувалися 4 попередні роки
VAR __Forecast = AVERAGEX(__Filter,[Rainfall_Add_Forecast]) --розраховуємо середнє значення за 4 останні роки для кожної комірки коригованого прогнозу
VAR __Correction = IF('Table_Rainfall'[Year]< __MinYear+__Number, BLANK(), __Forecast) -- проноз для всіх років, які виходять за межі ініцюючих перших років
RETURN
    __Correction


Стовпець = 
VAR __Rainfall = 'Table Rainfall'[Початковий перерахунок]
VAR __Year_Max = MAX('Table Rainfall'[Year])
VAR __Year = 'Table Rainfall'[Year]
VAR __Filter = FILTER('Table Rainfall', 'Table Rainfall'[Year] = __Year - 1)
VAR __A = SUMX(__Filter,[Rainfall])
VAR __B = SUMX(__Filter, [Початковий перерахунок])
VAR __S = CALCULATE(SUMX('Table Rainfall','Table Rainfall'[Rainfall]), ALL('Table Rainfall'),  'Table Rainfall'[Year] < __Year)
VAR __Smooth = CALCULATE(SUM('Table Rainfall'[Rainfall]), ALL('Table Rainfall'), 'Table Rainfall'[Year] = __Year-1)
RETURN
__Smooth + [_Параметр]*(__A - __B)
    --__Rainfall + [_Параметр](__P - __B)


_InvestimentReturn = 
    EXP(
        CALCULATE(
            SUMX(
                'Table', 
                LN(
                    IF(
                        'Table'[Index] = 1,
                        100 * 'Table'[Rate] + 100,
                        1 + 'Table'[Rate]
                        )
                    )
            ), 
            FILTER(
                ALL('Table'[Date]),
                [Date] <= MAX([Date]))))
VAR __Year_Max = MAX('Table Rainfall'[Year])
VAR __Year = 'Table Rainfall'[Year]
RETURN
CALCULATE(
    SUM('Table Rainfall'[Rainfall])
    FILTER(
                ALL('Table'[Date]),
                'Table Rainfall'[Year] <= __Year_Max
                &&
                'Table Rainfall'[Year] < __Year - 1)


Conditions = 
SUM('HR'[Condition 1]) + 
SUM('HR'[Condition 2]) + 
SUM('HR'[Condition 3])


_Preferences = 
SUM('HR'[Preference 1]) + 
SUM('HR'[Preference 2]) + 
SUM('HR'[Preference 3])


_Roles = 
SUM('HR'[Role 1]) + 
SUM('HR'[Role 2]) + 
SUM('HR'[Role 3]) + 
SUM('HR'[Role 4])


_Кількість куплених ліцензій = 
CALCULATE(
    COUNT('Dataset'[license_id]),
    'Dataset'[operation type] = "purchase" --залишаємо виключно куплені ліцензії, без скасувань
)



_Кількість діючих ліцензій на певний період часу = 
VAR __MaxDate = MAX('Dates'[Date])
VAR __MinDate = MIN('Dates'[Date])
RETURN
CALCULATE(
    COUNT('Dataset'[license_id]),
    'Dates'[Date] <= __MaxDate
    &&
    'Dates'[Date] >= __MinDate,
    FILTER('Dataset','Dataset'[operation_type] = "purchase")
)





_Кількість діючих ліцензій на певний період часу = 
VAR __MaxDate = MAX('Dataset'[sale_date])
VAR __MinDate = MIN('Dataset'[sale_date])
RETURN
CALCULATE(
    COUNT('Dataset'[license_id]),
    'Dataset'[sale_date] <= __MaxDate
    &&
    'Dataset'[sale_date] >= __MinDate,
        FILTER('Dataset','Dataset'[operation_type] = "purchase")
)



_Кількість діючих ліцензій на певний період часу = 
VAR __MaxDate = MAX('Dataset'[sale_date])
VAR __MinDate = MIN('Dataset'[sale_date])
RETURN
CALCULATE(
    COUNT('Dataset'[license_id]),
    'Dataset'[sale_date] <= MAX('Dates'[Date])
    &&
    'Dataset'[sale_date] >= MIN('Dates'[Date]),
    FILTER('Dataset','Dataset'[operation_type] = "purchase")
)


Active Contacts :=
VAR _MaxDate =
    MAX ( Dates[Date] )
VAR _MinDate =
    MIN ( Dates[Date] )
VAR _StartsBeforeMonthEnd =
    CALCULATETABLE ( VALUES ('Dataset'[license_id] ), Dates[Date] <= _MaxDate )
VAR _notEndAfterMonthEnd =
    CALCULATETABLE (
        VALUES ('Dataset'[license_id] ),
        Dates[Date] >= _MinDate
            || ISBLANK ( Dates[Date] ),
        USERELATIONSHIP ( Dates[Date],'Dataset'[End Date] )
    )
RETURN
    COUNTROWS ( INTERSECT ( _notEndAfterMonthEnd, _StartsBeforeMonthEnd ) )

_RR = 
VAR __Min = MIN('Dates separated'[Date])
VAR __Max = MAX('Dates separated'[Date])
VAR __Number = 
    CALCULATE(
        DISTINCTCOUNT('Дані'[Номер договору],
        'Дані'[Дата початку] <= __Max &&  'Дані'[Дата end] >= __Min)
    )
RETURN
    __Number


'Dataset'[license_id]


Brand Color Sales by Buying Group =

VAR __T1 = 
    SUMMARIZE(
    'Dimension Customer',
    'Dimension Customer'[Buying Group])
VAR __T2 =
    SUMMARIZE(
    'Dimension Stock Item', 
    'Dimension Stock Item'[Brand],
    'Dimension Stock Item'[Color],
    "Dimension Stock Item Brand Color Breakdown",
    SUMX(
        RELATEDTABLE('Fact Sale'),
    'Fact Sale'[Quantity]
    )
)
VAR __Generated =
    GENERATE(
        __T1,
        __T2
    )
RETURN
    __Generated


% of Red Items:= 
    DIVIDE(
        SUM('Fact Sale'[Red Items]),
        CALCULATE(
            SUM('Fact Sale'[Quantity]),
            FILTER('Fact Sale',RELATED('Dimension Stock Item'[Color])<>"N/A")
            )